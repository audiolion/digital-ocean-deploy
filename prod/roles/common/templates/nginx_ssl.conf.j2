upstream app_server_wsgiapp {
  server localhost:{{ wsgi_server_port }} fail_timeout=0;
}

server {
  listen 80;
  server_name {{ fqdn }}
  rewrite ^(.*) https://$server_name$1 permanent;
}

server {
  server_name         {{ fqdn }};
  listen              443 ssl;
  ssl_certificate     /etc/nginx//{{ app_name }}/{{ app_name }}.crt;
  ssl_certificate_key /etc/nginx/{{app_name}}/{{ app_name }}.key;
  ssl_session_timeout 1d;
  ssl_session_cache   shared:SSL:50m;
  ssl_protocols       TLSv1.1 TLSv1.2;
  ssl_cipers          'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-
SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-
GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-
ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-
SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-
RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-
SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-
SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-
SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-
RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
  ssl_prefer_server_cipers  on;
  access_log          /var/log/nginx/{{ fqdn }}.access.log;
  error_log           /var/log/nginx/{{ fqdn }}.error.log.info;
  keepalive_timeout   5;

  # nginx serve up static files and never send to the WSGI server
  location /static {
    autoindex on;
    alias {{ app_dir }}/{{ app_name }}/static;
  }

  location / {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    if (!-f $request_filename) {
      proxy_pass http://app_server_wsgiapp;
      break;
    }
  }

  # this section allows Nginx to reverse proxy for websockets
  location /socket.io {
    proxy_pass http://app_server_wsgiapp/socket.io;
    proxy_redirect off;
    proxy_buffering off;

    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
  }
}